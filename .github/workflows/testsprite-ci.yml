name: TestSprite CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Esecuzione manuale
  workflow_dispatch:
  # Esecuzione schedulata (ogni giorno alle 02:00)
  schedule:
    - cron: '0 2 * * *'

jobs:
  setup-test-environment:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: bemyrider_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> $GITHUB_ENV

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 30 # Attendi che il server si avvii
        curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

    - name: Setup test accounts
      run: |
        node scripts/create-test-accounts.js
        echo "✅ Account test creati con successo"

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

  testsprite-testing:
    needs: setup-test-environment
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> $GITHUB_ENV

    - name: Start application for testing
      run: |
        npm start &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        sleep 30
        curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

    - name: Create test accounts
      run: node scripts/create-test-accounts.js

    - name: Install TestSprite
      run: npm install -g @testsprite/testsprite-mcp

    - name: Run TestSprite tests
      run: |
        echo "🧪 Avvio test TestSprite..."
        npx testsprite-mcp generateCodeAndExecute \
          --project-path="$(pwd)" \
          --project-name="bemyrider" \
          --additional-instruction="Utilizzare account test: rider test.rider@bemyrider.test / TestRider2024! e merchant test.merchant@bemyrider.test / TestMerchant2024!"
        
        echo "📊 Test completati, generazione report..."

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: testsprite-results
        path: |
          testsprite_tests/testsprite-mcp-test-report.md
          testsprite_tests/tmp/
        retention-days: 30

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './testsprite_tests/testsprite-mcp-test-report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const summary = report.split('## 3️⃣ Coverage & Matching Metrics')[1]?.split('## 4️⃣')[0] || 'Report generato con successo';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 TestSprite Results\n\n${summary}\n\n📁 Report completo disponibile negli artifacts.`
            });
          }

    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  quality-gate:
    needs: [setup-test-environment, testsprite-testing]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.testsprite-testing.result }}" == "success" ]; then
          echo "✅ Quality gate passed! Tests completed successfully."
          exit 0
        else
          echo "❌ Quality gate failed! Review test results."
          exit 1
        fi

    - name: Notify on failure
      if: failure() && github.ref == 'refs/heads/main'
      run: |
        echo "🚨 Pipeline failed on main branch!"
        echo "📧 Notification would be sent to development team"
        # Qui si può aggiungere integrazione con Slack, Teams, etc.
