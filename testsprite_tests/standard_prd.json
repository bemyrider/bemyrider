{
  "meta": {
    "project": "bemyrider",
    "date": "2025-08-31",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "bemyrider è una piattaforma SaaS che connette esercenti locali con rider autonomi per prenotazioni di consegne a tariffa oraria, offrendo funzionalità personalizzate per rider ed esercenti con autenticazione robusta, dashboard differenziati e pagamenti integrati.",
  "core_goals": [
    "Fornire un sistema sicuro di autenticazione e gestione profili per rider ed esercenti.",
    "Consentire a esercenti di trovare, prenotare e pagare rider qualificati con tariffe personalizzate.",
    "Permettere ai rider di gestire la propria disponibilità, tariffe e ricevere pagamenti attraverso Stripe Connect.",
    "Garantire isolamento dei dati e sicurezza enterprise-grade tramite Row Level Security e controlli di accesso basati sui ruoli.",
    "Offrire un'interfaccia utente moderna, reattiva e coerente con navigazione facilitata e feedback immediati."
  ],
  "key_features": [
    "Registrazione unificata con selezione del ruolo e creazione automatica profilo.",
    "Dashboard dedicate per esercenti e rider con visualizzazione dati e controllo accessi rigorosi.",
    "Sistema di prenotazioni completo con gestione calendario, stato delle prenotazioni e storico.",
    "Integrazione Stripe Connect per pagamenti sicuri, onboarding e gestione account.",
    "Gestione profili utente con modifica dati personali, dati fiscali e possibilità di cancellazione account sicura.",
    "Sistema di autenticazione con Supabase Auth e gestione sessioni.",
    "Componenti UI riutilizzabili basati su Radix UI e Tailwind CSS con design moderno e animazioni fluide.",
    "Implementazione di Row Level Security su tutte le tabelle per garantire sicurezza e isolamento dati.",
    "Redirect intelligenti post-login basati sul ruolo utente.",
    "Supporto multi-ruolo (merchant e rider) con isolamento e accesso configurato."
  ],
  "user_flow_summary": [
    "Registrazione unificata: l'utente sceglie il ruolo (rider o esercenti), crea il proprio profilo automaticamente, e viene reindirizzato alla dashboard dedicata.",
    "Accesso: login con autenticazione tramite Supabase, redirect alla dashboard secondo il ruolo dell'utente.",
    "Gestione Dashboard Merchant: visualizzazione statistiche, ricerca rider con filtri, gestione prenotazioni con stato e storico, e pagamenti sicuri con Stripe.",
    "Gestione Dashboard Rider: modifica profilo, gestione calendario disponibilità, onboarding Stripe, visualizzazione statistiche personali.",
    "Prenotazione rider da parte del merchant con aggiornamento stato e notifiche relative.",
    "Gestione profilo usuario, inclusa modifica dati, aggiornamento tariffa, gestione dati fiscali e cancellazione account con doppio step di conferma.",
    "Logout sicuro con feedback e redirect alla pagina di login."
  ],
  "validation_criteria": [
    "La registrazione deve consentire la scelta del ruolo e creare i profili appropriati automaticamente nel database.",
    "I dashboard devono essere accessibili solo da utenti autenticati con il ruolo corretto e devono mostrare dati coerenti e aggiornati.",
    "Il sistema di prenotazione deve permettere la creazione, la visualizzazione e l'aggiornamento delle prenotazioni solo agli utenti autorizzati.",
    "L'integrazione Stripe deve garantire pagamenti sicuri, gestione account e webhook funzionanti correttamente con sincronizzazione dati.",
    "I dati sensibili e fiscali devono essere modificabili solo dall'utente interessato e protetti da accessi non autorizzati.",
    "La cancellazione account deve avvenire in modo sicuro con conferma doppio step e deve rimuovere tutte le informazioni associate sia da Supabase che dal database.",
    "Le politiche Row Level Security devono essere correttamente implementate e testate per garantire pieno isolamento tra ruoli e utenti.",
    "Le funzioni di logout devono rimuovere la sessione in modo sicuro e reindirizzare correttamente l'utente alla pagina di login.",
    "Le performance UI devono garantire caricamento veloce, feedback immediati e nessun problema di navigazione durante l'uso del prodotto."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 14",
      "React 18",
      "Supabase",
      "Drizzle ORM",
      "PostgreSQL",
      "Stripe",
      "Tailwind CSS",
      "Radix UI"
    ],
    "features": [
      {
        "name": "User Authentication",
        "description": "Sistema di autenticazione con login e registrazione usando Supabase Auth",
        "files": [
          "app/auth/login/page.tsx",
          "app/auth/register/page.tsx",
          "lib/supabase.ts",
          "lib/supabase-direct.ts"
        ]
      },
      {
        "name": "Dashboard Management",
        "description": "Dashboard separati per merchant e rider con gestione ruoli",
        "files": [
          "app/dashboard/page.tsx",
          "app/dashboard/merchant/page.tsx",
          "app/dashboard/rider/page.tsx"
        ]
      },
      {
        "name": "Rider Management",
        "description": "Gestione profili rider con disponibilità e tariffe",
        "files": [
          "app/riders/page.tsx",
          "app/api/riders/route.ts",
          "components/riders/AvailabilityBadge.tsx",
          "components/AvailabilityCalendar.tsx"
        ]
      },
      {
        "name": "Booking System",
        "description": "Sistema di prenotazioni per merchant",
        "files": [
          "app/api/bookings/merchant/[merchantId]/route.ts"
        ]
      },
      {
        "name": "Stripe Integration",
        "description": "Integrazione pagamenti Stripe con gestione account e webhook",
        "files": [
          "app/api/stripe/create-account/route.ts",
          "app/api/stripe/create-login-link/route.ts",
          "app/api/stripe/create-payment-intent/route.ts",
          "app/api/stripe/onboarding/route.ts",
          "app/api/stripe/webhook/route.ts",
          "lib/stripe.ts",
          "supabase/functions/stripe-webhook/index.ts"
        ]
      },
      {
        "name": "Profile Management",
        "description": "Gestione profili utente con modifica dati e cancellazione account",
        "files": [
          "app/api/profiles/[userId]/route.ts",
          "app/api/account/delete/route.ts",
          "components/EditProfileModal.tsx",
          "components/DeleteAccountModal.tsx",
          "components/FiscalDataModal.tsx",
          "components/UpdateRateModal.tsx"
        ]
      },
      {
        "name": "Database Schema",
        "description": "Schema database con Drizzle ORM e migrazioni",
        "files": [
          "lib/db/schema.ts",
          "lib/db/index.ts",
          "drizzle.config.ts",
          "drizzle/0000_glossy_krista_starr.sql",
          "drizzle/0001_free_omega_red.sql",
          "drizzle/0002_refactor_riders_safe.sql"
        ]
      },
      {
        "name": "UI Components",
        "description": "Componenti UI riutilizzabili con Radix UI e Tailwind",
        "files": [
          "components/ui/badge.tsx",
          "components/ui/button.tsx",
          "components/ui/card.tsx",
          "components/ui/input.tsx",
          "components/ui/label.tsx",
          "components/ui/toaster.tsx",
          "components/ui/use-toast.ts"
        ]
      },
      {
        "name": "Navigation",
        "description": "Componenti di navigazione e header dell'applicazione",
        "files": [
          "components/TopNavBar.tsx",
          "components/UserNav.tsx"
        ]
      },
      {
        "name": "Utilities",
        "description": "Funzioni di utilità, formatter e tipi condivisi",
        "files": [
          "lib/utils.ts",
          "lib/formatters.ts",
          "lib/types.ts",
          "lib/enums.ts"
        ]
      },
      {
        "name": "Testing Pages",
        "description": "Pagine di debug e test per sviluppo",
        "files": [
          "app/debug-user/page.tsx",
          "app/test-direct/page.tsx",
          "app/test-roles/page.tsx",
          "app/test-supabase/page.tsx"
        ]
      }
    ]
  }
}
